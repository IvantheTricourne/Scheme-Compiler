(library (Compiler finalize-locations)
  (export finalize-locations)
  (import (chezscheme) (Framework helpers) (Framework match))
  (define-who (finalize-locations x)
    (define (Var env) (lambda (v) (if (uvar? v) (cdr (assq v env)) v)))
    (define (Triv env) (lambda (t) (if (uvar? t) (cdr (assq t env)) t)))
    (define (get-reg-loc bind)
      (match bind
        ((,a ,d) (guard (frame-var? d)) (cons a a))
        ((,a ,d) (cons a d))))
    (define (Body b)
      (match b
        ((locate ,binds* ,[(Tail (map get-reg-loc binds*)) -> tail]) tail)))
    (define (Tail env)
      (lambda (tail)
        (match tail
          ((begin ,[(Effect env) -> ef*] ... ,[tail]) `(begin ,ef* ... ,tail))
          ((if ,[(Pred env) -> pred] ,[c] ,[a]) `(if ,pred ,c ,a))
          ((,[(Triv env) -> t]) `(,t)))))
    (define (Pred env)
      (lambda (pr)
        (match pr
          ((true) '(true))
          ((false) '(false))
          ((if ,[pred] ,[c] ,[a]) `(if ,pred ,c ,a))
          ((begin ,[(Effect env) -> ef*] ... ,[pred]) `(begin ,ef* ... ,pred))
          ((,relop ,[(Triv env) -> x] ,[(Triv env) -> y]) `(,relop ,x ,y)))))
    (define (Effect env)
      (lambda (ef)
        (match ef
          ((nop) '(nop))
          ((set! ,[(Var env) -> x] (,binop ,[(Triv env) -> y] ,[(Triv env) -> z]))
           `(set! ,x (,binop ,y ,z)))
          ((set! ,[(Var env) -> x] ,[(Triv env) -> y]) (if (eq? x y) '(nop) `(set! ,x ,y)))
          ((mset! ,[(Var env) -> base] ,[(Triv env) -> off] ,[(Triv env) -> exp])
           `(mset! ,base ,off ,exp))
          ((begin ,[ef] ,[ef*] ...) `(begin ,ef ,ef* ...))
          ((if ,[(Pred env) -> pred] ,[c] ,[a]) `(if ,pred ,c ,a))
          ((return-point ,lab ,[(Tail env) -> tail]) `(return-point ,lab ,tail)))))
    (match x
      [(letrec ([,label* (lambda () ,[Body -> body*])] ...) ,[Body -> body])
       `(letrec ([,label* (lambda () ,body*)] ...) ,body)])))
