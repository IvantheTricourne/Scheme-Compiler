(library (Compiler expose-basic-blocks)
  (export expose-basic-blocks)
  (import (chezscheme) (Framework helpers) (Framework match))
  (define-who (expose-basic-blocks expr)
    (define (Tail tail)
      (match tail
        ((if ,pred ,c ,a)
         (let ((tlab (unique-label 'c)) (flab (unique-label 'a)))
           (let-values (((pexp prest) (Pred pred tlab flab))
                        ((cexp crest) (Tail c))
                        ((aexp arest) (Tail a)))
             (values pexp `(,@prest (,tlab (lambda () ,cexp))
                                    ,@crest (,flab (lambda () ,aexp)) ,@arest)))))
        ((begin ,eff* ... ,tail)
         (let*-values (((texp trest) (Tail tail))
                       ((eexp erest) (Effect* eff* `(,texp))))
           (values eexp `(,@erest ,@trest ))))
        ((,triv) (values `(,triv) '()))))
    (define (Pred pred tlab flab)
      (match pred
        ((true) (values `(,tlab) '()))
        ((false) (values `(,flab) '()))
        ((if ,pr ,c ,a)
         (let ((tlab* (unique-label 'c)) (flab* (unique-label 'a)))
           (let-values (((pexp prest) (Pred pr tlab* flab*))
                        ((cexp crest) (Pred c tlab flab))
                        ((aexp arest) (Pred a tlab flab)))
             (values pexp `(,@prest (,tlab* (lambda () ,cexp))
                                    ,@crest (,flab* (lambda () ,aexp)) ,@arest)))))
        ((begin ,eff* ... ,pr)
         (let*-values (((pexp prest) (Pred pr tlab flab))
                       ((eexp erest) (Effect* eff* `(,pexp))))
           (values eexp `(,@erest ,@prest))))
        (,x (values `(if ,x (,tlab) (,flab)) '()))))
    (define (Effect* eff* acc)
      (match eff*
        (() (values (make-begin acc) '()))
        ((,e* ... ,e) (Effect e* e acc))))
    (define (Effect eff* eff acc)
      (match eff
        ((nop) (Effect* eff* acc))
        ((if ,pred ,c ,a)
         (let ((tlab (unique-label 'c)) (flab (unique-label 'a)) (jlab (unique-label 'j)))
           (let*-values (((pexp prest) (Pred pred tlab flab))
                         ((cexp crest) (Effect '() c `((,jlab))))
                         ((aexp arest) (Effect '() a `((,jlab))))
                         ((eexp erest) (Effect* eff* `(,pexp))))
             (values eexp `(,@erest ,@prest (,tlab (lambda () ,cexp))
                                    ,@crest (,flab (lambda () ,aexp))
                                    ,@arest (,jlab (lambda () ,(make-begin acc))))))))
        ((begin ,e* ...) (Effect* (append eff* e*) acc))
        ((return-point ,label ,tail)
         (let*-values (((texp trest) (Tail tail))
                       ((eexp erest) (Effect* eff* `(,texp))))
           (values eexp `(,@erest ,@trest (,label (lambda () ,(make-begin acc)))))))
        (,x (Effect* eff* `(,x ,@acc)))))
    (match expr
      ((letrec ((,label* (lambda () ,[Tail -> texp* trest*])) ...) ,[Tail -> texp trest])
       `(letrec ((,label* (lambda () ,texp*)) ... ,trest* ... ... ,@trest) ,texp)))))
