(library (Compiler optimize-known-call)
  (export optimize-known-call)
  (import (chezscheme) (Framework match) (Framework helpers))
  (define-who (optimize-known-call x)
    (define (optimize env)
      (lambda (x)
        (match x
          ((letrec ([,var* ,bind*] ...) (closures ,clos* ,body))
           (let* ([env^ (append clos* env)])
             `(letrec ([,var* ,((optimize env^) bind*)] ...)
                (closures ,clos* ,((optimize env^) body)))))
          ((lambda (,fml* ...) ,[body])
           `(lambda (,fml* ...) ,body))
          ((let ([,var* ,[bind*]] ...) ,[body])
           `(let ([,var* ,bind*] ...) ,body))
          ((begin ,[eff*] ... ,[eff])
           (make-begin `(,@eff* ,eff)))
          ((if ,[p] ,[c] ,[a]) `(if ,p ,c ,a))
          ;; rator/rand
          ((,rat ,[rand*] ...) (guard (uvar? rat))
           `(,((Call env) rat) ,@rand*))
          ((,[rat] ,[rand*] ...) `(,rat ,@rand*))
          ;; dream catcher
          (,x x))))
    (define (Call env)
      (lambda (x)
        (cond
         ((assq x env) => cadr)
         (else x))))
    ((optimize '()) x)))
