(library (Compiler optimize-jumps)
  (export optimize-jumps)
  (import (chezscheme) (Framework match) (Framework helpers))
  (define-who (optimize-jumps x)
    (define (opt progs body)
      (define (repoint-label lbl assoc)
        (cond
         ((assq lbl assoc) => (lambda (x) (repoint-label (cdr x) assoc)))
         (else `(,lbl))))
      (let-values
          ([(assoc binds) 
            (let loop ([l progs] [a '()] [b '()] [c '()])
              (if (null? l) (values a b)
                  (match (car l)
                    ((,l1 (lambda () (,l2))) (guard (and (label? l2) (memq l2 c)))
                     (loop (cdr l) a `(,@b (,l1 (lambda () (,l1)))) (remove l2 c)))
                    ((,l1 (lambda () (,l2))) (guard (label? l2))
                     (loop (cdr l) (cons (cons l1 l2) a) b (cons l1 c)))
                    (,x (loop (cdr l) a `(,@b ,x) c)))))])
        (map (lambda (bind)
               (match bind
                 ((,lbl (lambda () ,[body])) `(,lbl (lambda () ,body)))
                 ((begin ,[eff*] ... ,[eff]) (make-begin `(,eff* ... ,eff)))
                 ((if ,[p] ,[c] ,[a]) `(if ,p ,c ,a))
                 ((,b/r ,[x] ,[y]) `(,b/r ,x ,y))
                 ((,lbl) (repoint-label lbl assoc)) (,x x))) `(,body ,@binds))))
    (match x ((letrec ,prg ,b) (match (opt prg b) ((,a . ,d) `(letrec ,d ,a)))))))
