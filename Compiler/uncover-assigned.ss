(library (Compiler uncover-assigned)
  (export uncover-assigned)
  (import (chezscheme) (Framework match) (Framework helpers))
  (define-who (uncover-assigned x)
    (define (Expr env)
      (define (imm? i)
        (or (number? i) (boolean? i) (null? i)))
      (lambda (x)
        (match x
          ((quote ,i) (guard (imm? i)) `(quote ,i))
          ((set! ,uvar ,[exp])
           (set! env (cons uvar env))
           `(set! ,uvar ,exp))
          ((letrec ([,var* ,[exp*]] ...) ,[exp])
           `(letrec ([,var* ,exp*] ...)
              (assigned ,(intersection var* env) ,exp)))
          ((let ([,var* ,[exp*]] ...) ,[exp])
           `(let ([,var* ,exp*] ...)
              (assigned ,(intersection var* env) ,exp)))
          ((lambda (,fml* ...) ,[exp])
           `(lambda (,@fml*)
              (assigned ,(intersection fml* env) ,exp)))
          ((if ,[p] ,[c] ,[a]) `(if ,p ,c ,a))
          ((begin ,[exp*] ... ,[exp]) (make-begin `(,@exp* ,exp)))
          ;; rat/rand
          ((,[rat] ,[rand*] ...) `(,rat ,@rand*))
          ;; dream catcher
          (,x x))))
    ((Expr '()) x)))
