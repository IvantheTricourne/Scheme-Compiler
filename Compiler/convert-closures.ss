(library (Compiler convert-closures)
  (export convert-closures)
  (import (chezscheme) (Framework match) (Framework helpers) (Compiler helpers))
  (define-who (convert-closures x)
    (define (convert x)
      (match x
        ((letrec ([,[Label -> lab* var*] ,[Lambda -> lam* free*]] ...) ,[exp])
         `(letrec ([,lab* ,lam*] ...)
            (closures ((,var* ,lab* ,@free*) ...) ,exp)))
        ((let ([,var* ,[exp*]] ...) ,[exp]) `(let ([,var* ,exp*] ...) ,exp))
        ((begin ,[exp*] ... ,[exp]) `(begin ,exp* ... ,exp))
        ((if ,[p] ,[c] ,[a]) `(if ,p ,c ,a))
        ((,rat ,[rand*] ...) (guard (uvar? rat)) `(,rat ,rat ,@rand*))
        ((,rat ,[rand*] ...) (guard (list? rat))
         (let ([tmp (unique-name 'tmp)]) 
           `(let ([,tmp ,(convert rat)]) (,tmp ,tmp ,@rand*))))
        ((,rat ,[rand*] ...) `(,rat ,@rand*))
        (,x x)))
    (define (Label var) (values (unique-label var) var))
    (define (Lambda lam)
      (match lam
        ((lambda (,fml* ...) (free (,fr* ...) ,[convert -> body]))
         (let ([cp (unique-name 'cp)])
           (values `(lambda (,cp ,@fml*) (bind-free (,cp ,@fr*) ,body)) fr*)))))
    (convert x)))
