(library (Compiler generate-x86-64)
  (export generate-x86-64)
  (import (chezscheme) (Framework helpers) (Framework match))
  (define-who (generate-x86-64 x)
    (define (prim->opcode prim)
      (cdr (assq prim '((+ . addq) (- . subq) (* . imulq) (logand . andq) (logor . orq) (sra . sarq)))))
    (define (Code ef)
      (match ef
        (,lab (guard (label? lab)) (emit-label lab))
        ((jump ,rand) (emit-jump 'jmp rand))
        ((set! ,rand1 ,lab) (guard (label? lab)) (emit 'leaq lab rand1))
        ((set! ,rand1 (,prim ,rand1 ,rand2)) (emit (prim->opcode prim) rand2 rand1))
        ((set! ,rand1 ,rand2) (emit 'movq rand2 rand1))
        ((if ,p (jump ,j))
         (Code p)
         (pred->opcode p j))
        ((not (,p ,v1 ,v2)) (emit 'cmpq v2 v1))
        ((,p ,v1 ,v2) (emit 'cmpq v2 v1))))
    (define (pred->opcode p j)
      (match p
        ((= ,v1 ,v2) (emit-jump 'je j))
        ((not (= ,v1 ,v2)) (emit-jump 'jne j))
        ((< ,v1 ,v2) (emit-jump 'jl j))
        ((not (< ,v1 ,v2)) (emit-jump 'jge j))
        ((<= ,v1 ,v2) (emit-jump 'jle j))
        ((not (<= ,v1 ,v2)) (emit-jump 'jg j))
        ((> ,v1 ,v2) (emit-jump 'jg j))
        ((not (> ,v1 ,v2)) (emit-jump 'jle j))
        ((>= ,v1 ,v2) (emit-jump 'jge j))
        ((not (>= ,v1 ,v2)) (emit-jump 'jl j))))
    (match x ((code ,code* ...) (emit-program (for-each Code code*))))))
