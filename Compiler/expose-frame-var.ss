(library (Compiler expose-frame-var)
  (export expose-frame-var)
  (import (chezscheme) (Framework helpers) (Framework match) (Compiler helpers))
  (define-who (expose-frame-var x)
    (define (Tail t)
      (match t
        ((if ,[Pred -> p] ,[t1] ,[t2]) `(if ,p ,t1 ,t2))
        ((begin ,[Effect -> eff*] ... ,[tail]) (make-begin `(,@eff* ,tail)))
        ((,[Triv -> triv]) `(,triv))
        (,triv (guard (triv? triv)) (Triv triv))))
    (define (Pred p)
      (match p
        ((if ,[p1] ,[p2] ,[p3]) `(if ,p1 ,p2 ,p3))
        ((begin ,[Effect -> eff*] ... ,[pred]) (make-begin `(,@eff* ,pred)))
        ((,relop ,[Triv -> x] ,[Triv -> y]) `(,relop ,x ,y))
        (,x x)))
    (define fo 0)
    (define (Effect e)
      (match e
        ((if ,[Pred -> pred] ,[e1] ,[e2]) `(if ,pred ,e1 ,e2))
        ((begin ,[eff*] ... ,[eff]) (make-begin `(,@eff* ,eff)))
        ((return-point ,label ,[Tail -> tail]) `(return-point ,label ,tail))
        ((set! ,fp (- ,fp ,nb)) (guard (eq? fp frame-pointer-register))
         (set! fo (+ fo nb))
         `(set! ,fp (- ,fp ,nb)))
        ((set! ,fp (+ ,fp ,nb)) (guard (eq? fp frame-pointer-register))
         (set! fo (- fo nb))
         `(set! ,fp (+ ,fp ,nb)))
        ((set! ,[Triv -> x] (,binop ,[Triv -> y] ,[Triv -> z])) (guard (binop? binop))
         `(set! ,x (,binop ,y ,z)))
        ((set! ,[Triv -> x] (mref ,[Triv -> y] ,[Triv -> z])) `(set! ,x (mref ,y ,z)))
        ((set! ,[Triv -> x] ,[Triv -> y]) `(set! ,x ,y))
        (,x x)))
    (define (Triv t)
      (match t
        (,triv (guard (frame-var? triv))
               (make-disp-opnd
                frame-pointer-register
                (- (ash (frame-var->index triv) word-shift) fo)))
        (,triv (guard (triv? triv)) triv)
        (,reg (guard (register? reg)) reg)))
    (match x
      ((letrec ((,lab (lambda () ,[Tail -> tail*])) ...) ,[Tail -> tail])
       (set! fo 0)
       `(letrec ((,lab (lambda () ,tail*)) ...) ,tail)))))
